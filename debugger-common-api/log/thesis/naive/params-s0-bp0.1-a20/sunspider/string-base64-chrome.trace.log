Breakpoint Set at 42
Breakpoint Set at 42
Breakpoint Set at 119
Breakpoint Set at 75
Breakpoint Set at 128
Breakpoint Set at 42
Breakpoint Set at 96
Breakpoint Set at 92
Breakpoint Set at 121
Breakpoint Set at 42
Breakpoint Set at 103
Breakpoint Set at 42
Breakpoint Set at 60
Paused at 42
	Hit Breakpoint(s) 
	Call Stack:  
	Bindings: 
Paused at 75
	Hit Breakpoint(s) 
	Call Stack:  
	Bindings: 
Paused at 119
	Hit Breakpoint(s) 
	Call Stack:  
	Bindings: 
Paused at 121
	Hit Breakpoint(s) 
	Call Stack:  
	Bindings: 
Paused at 121
	Call Stack:  
	Bindings: 
Paused at 128
	Hit Breakpoint(s) 
	Call Stack:  
	Bindings: 
Paused at 60
	Hit Breakpoint(s) 
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 61
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 62
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 129
	Call Stack:  
	Bindings: 
Paused at 92
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: undefined
		data: string = 
		i: undefined
		leftbits: number = 0
		leftdata: number = 0
		padding: undefined
		result: string = 
Paused at 92
	Call Stack: base64ToString 
	Bindings: c: undefined
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: undefined
		result: string = 
Paused at 96
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 6
		leftdata: number = 29
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 7
		data: string = 
		i: number = 1
		leftbits: number = 6
		leftdata: number = 29
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 7
		data: string = 
		i: number = 1
		leftbits: number = 12
		leftdata: number = 1863
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 37
		data: string = 
		i: number = 2
		leftbits: number = 4
		leftdata: number = 7
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 37
		data: string = 
		i: number = 2
		leftbits: number = 10
		leftdata: number = 485
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 43
		data: string = 
		i: number = 3
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 
	Call Stack: base64ToString 
	Bindings: c: number = 43
		data: string = 
		i: number = 3
		leftbits: number = 8
		leftdata: number = 107
		padding: boolean = false
		result: string = 
