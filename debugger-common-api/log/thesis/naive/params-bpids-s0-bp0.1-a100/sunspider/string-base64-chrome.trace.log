Breakpoint 0 Set at 42
Breakpoint 1 Set at 42
Breakpoint 2 Set at 119
Breakpoint 3 Set at 75
Breakpoint 4 Set at 128
Breakpoint 5 Set at 42
Breakpoint 6 Set at 96
Breakpoint 7 Set at 92
Breakpoint 8 Set at 121
Breakpoint 9 Set at 42
Breakpoint 10 Set at 103
Breakpoint 11 Set at 42
Breakpoint 12 Set at 60
Paused at 42
	Hit Breakpoint(s) 0, 1, 5, 9, 11
	Call Stack:  
	Bindings: 
Paused at 75
	Hit Breakpoint(s) 3
	Call Stack:  
	Bindings: 
Paused at 119
	Hit Breakpoint(s) 2
	Call Stack:  
	Bindings: 
Paused at 121
	Hit Breakpoint(s) 8
	Call Stack:  
	Bindings: 
Paused at 121
	Call Stack:  
	Bindings: 
Paused at 128
	Hit Breakpoint(s) 4
	Call Stack:  
	Bindings: 
Paused at 60
	Hit Breakpoint(s) 12
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 61
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 62
	Call Stack: toBase64 
	Bindings: data: string = 
		i: number = 8190
		length: number = 8192
		result: string = 
Paused at 129
	Call Stack:  
	Bindings: 
Paused at 92
	Hit Breakpoint(s) 7
	Call Stack: base64ToString 
	Bindings: c: undefined
		data: string = 
		i: undefined
		leftbits: number = 0
		leftdata: number = 0
		padding: undefined
		result: string = 
Paused at 92
	Call Stack: base64ToString 
	Bindings: c: undefined
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: undefined
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 0
		leftbits: number = 6
		leftdata: number = 29
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 1
		leftbits: number = 6
		leftdata: number = 29
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 1
		leftbits: number = 12
		leftdata: number = 1894
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 2
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 29
		data: string = 
		i: number = 2
		leftbits: number = 10
		leftdata: number = 413
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 53
		data: string = 
		i: number = 3
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 53
		data: string = 
		i: number = 3
		leftbits: number = 8
		leftdata: number = 117
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 53
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 3
		leftbits: number = 8
		leftdata: number = 117
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 4
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 4
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 92
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 4
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 55
		data: string = 
		i: number = 5
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 55
		data: string = 
		i: number = 5
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 100
	Call Stack: base64ToString 
	Bindings: c: number = 55
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 5
		leftbits: number = 6
		leftdata: number = 1591
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 55
		data: string = 
		i: number = 5
		leftbits: number = 12
		leftdata: number = 1591
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 6
		leftbits: number = 4
		leftdata: number = 7
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 6
		leftbits: number = 10
		leftdata: number = 481
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 8
		leftdata: number = 106
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 8
		leftdata: number = 106
		padding: boolean = false
		result: string = 
Paused at 106
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 0
		leftdata: number = 106
		padding: boolean = false
		result: string = 
Paused at 107
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 0
		leftdata: number = 106
		padding: boolean = false
		result: string = 
Paused at 108
	Call Stack: base64ToString 
	Bindings: c: number = 42
		data: string = 
		i: number = 7
		leftbits: number = 0
		leftdata: number = 106
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 25
		data: string = 
		i: number = 8
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 25
		data: string = 
		i: number = 8
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 25
		data: string = 
		i: number = 8
		leftbits: number = 6
		leftdata: number = 25
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 39
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 9
		leftbits: number = 6
		leftdata: number = 25
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 39
		data: string = 
		i: number = 9
		leftbits: number = 6
		leftdata: number = 25
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 39
		data: string = 
		i: number = 9
		leftbits: number = 12
		leftdata: number = 1639
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 1
		data: string = 
		i: number = 10
		leftbits: number = 4
		leftdata: number = 7
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 1
		data: string = 
		i: number = 10
		leftbits: number = 10
		leftdata: number = 449
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 1
		data: string = 
		i: number = 10
		leftbits: number = 10
		leftdata: number = 449
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = 
		i: number = 11
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 11
		leftbits: number = 8
		leftdata: number = 116
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = 
		i: number = 11
		leftbits: number = 8
		leftdata: number = 116
		padding: boolean = false
		result: string = 
Paused at 106
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = 
		i: number = 11
		leftbits: number = 0
		leftdata: number = 116
		padding: boolean = false
		result: string = 
Paused at 107
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = 
		i: number = 11
		leftbits: number = 0
		leftdata: number = 116
		padding: boolean = false
		result: string = 
Paused at 108
	Call Stack: base64ToString 
	Bindings: c: number = 52
		data: string = 
		i: number = 11
		leftbits: number = 0
		leftdata: number = 116
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 12
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 12
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 12
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 6
		leftdata: number = 24
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 12
		leftdata: number = 1574
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 12
		leftdata: number = 1574
		padding: boolean = false
		result: string = 
Paused at 106
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 13
		leftbits: number = 4
		leftdata: number = 1574
		padding: boolean = false
		result: string = 
Paused at 107
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 4
		leftdata: number = 1574
		padding: boolean = false
		result: string = 
Paused at 108
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 4
		leftdata: number = 1574
		padding: boolean = false
		result: string = 
Paused at 92
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 13
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 92
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 14
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 93
	Call Stack: base64ToString 
	Bindings: c: number = 38
		data: string = 
		i: number = 14
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 61
		data: string = 
		i: number = 14
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 61
		data: string = 
		i: number = 14
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 61
		data: string = 
		i: number = 14
		leftbits: number = 10
		leftdata: number = 445
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 50
		data: string = 
		i: number = 15
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 50
		data: string = 
		i: number = 15
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 50
		data: string = 
		i: number = 15
		leftbits: number = 8
		leftdata: number = 114
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 30
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 16
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 30
		data: string = 
		i: number = 16
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 30
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 16
		leftbits: number = 6
		leftdata: number = 30
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 23
		data: string = 
		i: number = 17
		leftbits: number = 6
		leftdata: number = 30
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 23
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 17
		leftbits: number = 6
		leftdata: number = 30
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 23
		data: string = 
		i: number = 17
		leftbits: number = 12
		leftdata: number = 1943
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = 
		i: number = 18
		leftbits: number = 4
		leftdata: number = 7
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = 
		i: number = 18
		leftbits: number = 10
		leftdata: number = 453
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 49
		data: string = 
		i: number = 19
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 49
		data: string = 
		i: number = 19
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 100
	Call Stack: base64ToString 
	Bindings: c: number = 49
		data: string = 
		i: number = 19
		leftbits: number = 2
		leftdata: number = 113
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 49
		data: string = 
		i: number = 19
		leftbits: number = 8
		leftdata: number = 113
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 49
		data: string = 
		i: number = 19
		leftbits: number = 8
		leftdata: number = 113
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 28
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 20
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 28
		data: string = 
		i: number = 20
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 28
		data: string = 
		i: number = 20
		leftbits: number = 6
		leftdata: number = 28
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 54
		data: string = 
		i: number = 21
		leftbits: number = 6
		leftdata: number = 28
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 54
		data: string = 
		i: number = 21
		leftbits: number = 6
		leftdata: number = 28
		padding: boolean = false
		result: string = 
Paused at 100
	Call Stack: base64ToString 
	Bindings: c: number = 54
		data: string = 
		i: number = 21
		leftbits: number = 6
		leftdata: number = 1846
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 54
		data: string = 
		i: number = 21
		leftbits: number = 12
		leftdata: number = 1846
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 22
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = 
		i: number = 22
		leftbits: number = 4
		leftdata: number = 6
		padding: boolean = false
		result: string = 
Paused at 100
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = 
		i: number = 22
		leftbits: number = 4
		leftdata: number = 389
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 5
		data: string = 
		i: number = 22
		leftbits: number = 10
		leftdata: number = 389
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 23
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 99
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 23
		leftbits: number = 2
		leftdata: number = 1
		padding: boolean = false
		result: string = 
Paused at 103
	Hit Breakpoint(s) 10
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 23
		leftbits: number = 8
		leftdata: number = 97
		padding: boolean = false
		result: string = 
Paused at 104
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 23
		leftbits: number = 8
		leftdata: number = 97
		padding: boolean = false
		result: string = 
Paused at 106
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = 
		i: number = 23
		leftbits: number = 0
		leftdata: number = 97
		padding: boolean = false
		result: string = 
Paused at 107
	Call Stack: base64ToString 
	Bindings: c: number = 33
		data: string = FwZGxtd3J2Z2JqdXdzYnFtdnBxbGNyZHJ4a3dpa290eHBjZG5vaHlrbXV0ZnRkcXRncm1oamNtd3JkaXBhdHJ0ZWNzZnhxaGl5YXFxZGZldHBjd3VhYWtwc2F1cGlhbXBscmF0ZGdwdWlkZWJ3dHZjbXJtZWZtc2d4dHFqbGdobGJ3d3VpdHdmb2NvcXB1bW5zYW9jeWpycHlybG9qYWxrdXBubGVnbWhjdWxyanNrdWdhdmp1aWJ0YWJkbGx5bW1nb3NqdHJsZm1zeWR1dHdwc3RnZW5sc2xydGFoanltcGV5ZmpsZWV1d2l1cXZ4YndjZWNsbnNnbGZ1b2ZzZnVidHJqZGF3aHVwcnZhbm9mdWNzcXNpZ3d2aWhleWRpd2dkY3FsbWR5bm9hamJrcGNkcXJrbXB2bnhnamtnZG1hZHB4Zm5tdHdmYWFzYW9wZ2NxZGppd21tbXFwamJ2eGZrZ2JzbHdkcGFucmN2aW1ldnV5dm12ZG9waWRpb2lncWlsc2FyeXBtZmRjYmZxY2J2ZGxia3FsanZ1cHZhaWZqamFjdWVnd2ZvdGpwZWNvamJ3YXd4cGxzZWVibGdtbGl3YnJmeWtvc2JqaGh5cGlmY2R2ZnZ0c3N1bmJrZXR3b3dkc2xpYm54c2NmcGF2Zmp3ZnJxcmF1cXhocmZpYmJkZ254b3V5eGxwa3hpcWptcW1kYmR3dXlscXl2b3VncW1mdHdydWpnYXBxc3hnY21waXBicnlkY2ppcnFvdWpxbWdldHJkZ291anRtYnFrYm9wYm13Ymhnbnd2eWp1cXBueWllbXB5eG5sYWx2YXV4bXhnYnRyYnl1a3RoZ3h2bGFjamRxY2l3dWxuZ2tyb21rZ2FwZHdzb3NldnlmZHRjcG9tc2tjcnNidmp1a2hrcG1pZ3dkZGVrYXl4bGRlYXhib29jZ25ycWlxcmlzZ2dzYmV3aXdleGdlZXFicGtsY2pmbWVieHhybGp0Zml5ZXVnZGxzdXNpcGd2d2xwY3NoZmF0ZWhzZG11ZXVqdGx4dXd0d2J5aGNidG9zeW1xeG1xdmtpeHhpbnlsZmh5bWRpZGtlaHhqeXV0bGd4ZWttaXZpc25ycW5qbWxyYnN0Z3l1aXJma29od3Zhc3VpeGRwZmhzZG9iZXNidWdzaGp1Y2VwYWZsZ2lkZmJjZHV4Z293aGR2Z2h5dmZ5YXl0bWFoZHFxY3Vzb2p2eXlucGFwZW15bHB4ZmVocHN1d3hjd2pqbGxnZnV1Z3V3dGVwZnRwcmtqd2h2bnV4aGJlamlhaHNka2N2c3J1dW1ia3FuaHl0cXBnc3ZnbXRkdWxycXN0dW1ycnF4cG9ub3Zjcnl3Y25qa251cndycGZwbWFnYnRxZnR0dnR1cGVya2lrbnZzcnJsd3d3eG11c2V5b2F5Y3h1aG1jamFjcGxrbG9lbGhrb2xsb2hjanBhdWdxdHJheXdrbGVvYWttbmVybmRucGhyZXh2cnBvY2phaGlvYm1icXR4a2hmdnFzYWx4eXJtd3RqZW5hdHl4eWNuaHBrdm1xZmZnc3Zlb3JwdXVjbWJhZXJqZGlsYWd2ZGpvY3Jhd2JkY2xvaHF3Zmd0Y2VidWNhdXF3ZGpyeHVhZm10bHFpZHh4ZGtybG1samVsbWhjc3l2d2pzcmxwYmlzYmZocHZqd21yZGZvdHVkZGhueXFucGdsa2NuZGJucGh3cnNyaXRhYmp5b2VhcnJmZnBvZWh0bmlmeGd1aXJiZnFtbmZ3b3Fpd3RscGV0cXhvbXFuc2Zrd2V3bm5xdW5ya2t1dmZuZG50Y3NvZGh4cWpuanlrbG5hdmVhZnhsdnlyb3RqcnJ3ZWFwaXBkdWpueWVwb25rdnh4dGRxY2l4dWFhbWJtdGJxbmhqZ2x3bHRyY211dXh1YXd3Ymppcmpucm5zbGNmZnBkdGd4bmtreXhrcHhtd2NvbGxucHFraW5ocW9rZ2Zhc3lxcnRha2tjamRzcnFtbG1vdHVxZm1raXJtY2VicGN3c3V4eWZjd2NvZGxwbnlzZ3hjdGhzandiaWVraGFub3lla2tsbHl2YmVqYXd3bmtraXJ3Zmp4aWNjcWlvbG51c2h0Z2FjaWpuZ3d4aXBzd21xdGZxZXZqc3R0a250dmxhaW1ydWhya2lxdXZpdWRwdmJ3c2x5bmdpamJua3F1YXZybWRxaWtraGJheG9jc3ZkdGVoaXZjcWZva3d4cGp1cGRic29kd2ZrZWxmaGp1aG5nbG9ycmVla2FrbnVubmJpY25pZWxoamhoZ2lyaGhjdmdqaGpyZGJqd2lndXFvYWNybmlyYWZ0cGh4c2JuaGp0bndkeHJwaXFqaWhxYWVoc2dra3hiYnhic2RiYWRxdHF0ZXB0cmtvanhldmRsZ2tkbXNianBpZ3djcXhiaG5wYm5rY3Jsa2d2Y3dmaGl5a2dud3hoeGx0ZGZ1eWx1dnN2dXlwY2x2YW9lb2RkdWNoa2xycG5seXRmcXV3dmdieWR1Ym5yZGphb2NidGh3cHV5cWpmdHh5aG9kb3hjeXJmcGtoaWNscmpsb2FlbW50dnZlY2xybHF1a3B4Y3dpZmhoYWZ3d2tpcnNnaWhqZ2tlbXhyZGFtZWxxb2dzZ2x0d292cXZhcXRobm10bXZrcmJ0eGVxY3BybmJ1ZmRheWhueWR3bnlnZnJybmtqcXJ0ZnhtcHJmbGhldGR1cnd0aG9ndXBva3Zxd21qdHRid3BldGlxcXdhaGZvbXNna3VvaGltd2ZzcXZ5eHd2bWJxdGx3anl0d2p2aXlkaGRtb2dsbXR4YXlxbWFleXZlcHVmZmNicG5ibXh0bWJ0eXRteWNxdGZucGlraWptbmZwZnBkbGRkcGhuYWdlamhzcGNibWNiY3BkbmZmbmJldG5veHVydGh3cHFkbnFwc2h2YmJucGxlZHlucGRqZnZmeG5jcm5hZGdobGVvanlkb2p1c3ZpYnlneGFmYmhhdm5qZGt1dGx0ZHFra2F0cnZleXRwZGZvcGVwbWV5cHNwZml1b3Vpb2V1eXl2cGtjaGlqcnBtaG92cnNoaGhwZWNwZmF5bHRycXNwZG9ocGhwdnhoYWFtZmxpdnJkaXNkdWNleHVxaHRraWpsdWZub2Nmb25yaHViZGRqaXVsY2lsdHVrbndlb2Zydmp4eW1obWphZGp1bWZkY2NvdWZmZm5ldHBqZWhueXVlb2hzanFscmdxZnN3dmFjYnBleWphYnZzZXNjZ3JtZW9jcWZqd2ducWZqaWxmcmVkbmR1Z3ZhdnludHhyaXZ5aWRkYXhnZWh4aGZhZWRjdHlwdm90dm92d2d3dXR2bHZia2NnaHhoZm92aHlyd3djbXhlZHJkZ3FhdmhlcWJmY3J0dXZ0cGhuamtpZXNlYWhmd2ZtbWt2cHFtbnlqbXBkbXlzdmNud2Zhdmtmb3RrdmNtZ3VmY3hvbGRjYXRhbGxpdXNzanhneHlod2l2aWR0aGJvaXJvYmtmYnNhcWVmcWhobGloY3ViZ3ZydXN2YW9zd2FmYWlubGpxa3VtZnlwY2ZnaGlpaWRleXhjdmxieW5lc25jc2lydGN2YWx1ZGRieXZyc29kZWpmeG9jYXJub3RkdGFka2NvbHJ5b2hndm5zd2djdWdqZ2V4eWJmbm9jamt4cXlwcGRvc2xocHlvaWNnaWl4ZWlkcnV3cnlrZWZhanRpb3VkZHVjaml0cHZucHd1eXVmYWphcmxuY2Fsb252eGRyZXZxbXJtZ3BlbXR2c2NkZ2huZ2N2Z21tZ2VnYmtwb3Rxc2V0cG9zYWxsZmF0b3Bub2l4d3h5bGhsbGxqa252amxkeWdpbW95ZGpkcnl5YWxlbXRzY3Jla2Jld2tndnJqZWhjdmNvZXNhcWpwdmt5ZGx3bXh4bGFzeGJhbmRxd3hlcGNieGd0eXh5bnF2c2xrdHB5Y2Fod21pYWZqaGRnbHVleHhld2xpbmZrY3d0YXBvcWtjYW92dGFianhvZG1xbWV1bnhiaG1mZ254cWtqd3duaHR2bHNjeHZlaHZ0c3Nyd29sd2hlZmVjYnhhd3RleXdhcXd4bWtyeXFhc2x1cHZpY2p3Z2JsbWhtZGhsa3ZsdWR2aWtxd2lneGV5ZHNweHJ5eWdiYXliZXhubGJqYXlhb2RibXdlYnlveWlpc2dkc2lvdGFxZ3lzbmlxZ2Nhcmdnb3FrZGhmb3VvdWx4dnhzZmNqbnZpdWlkZ3loY214Y3dydHFsa3VlbW5qbXh4ZWlsZ3JseGVrbGxmdW53bmJ4bndscmlwb2ZxZWx2YW9ndmVlcXdraWttc2dod2xtZnh0aWx1Z2pxcXBpY3RhZWdrb3Fua3Bwa21qb3FqcGJrcWVvY2dlZnZneWx1Ym1mYWVzeGd4dW9qeXJoc2FmdXV3Ym5xam5rbHVidXd4dGx5ZGNmaGxvaGhpaXByZWN0c3dyZnl4b2pwaG50d3VsaHFsd2dkeXJpZWV3eGdidmNvbGxteWNicXFiaWJ1aXJpanFydGRucmFwdGtvZHFicHR0bGdydGRmc2ZhdGNpY2Zvamlpb2p5aXdpdXJvZmdpcGtmdmxqdWtvcHFpbGlpaXh2Zmt0Z2x0a2RpdW5rbXZmc3VmdnloYXFyZHBpd2FvZ25tcXBnZGZxZmRxbnV5Z2Z5bWd5bnN4Y21laXFmbnBoeWlneXJ2eGtwa3RmdHFwc2didWh4YXlsbGV1cGlyY3Jic25za2JuZnFobXRqaGhnam5hcnBnbHN1b2didmZ0aHd0a211b2tiZmpxYmx3Ym9ham1scnB3cmllbmdsaWJrd2dwZnlmaXF2amFpY3ZwZ2tic3JvbWdwaXNtdmp5bWFjbnlieWV4Y3Zwd2VraGx1cnF5ZWV1bHFob3F5YW1kZmh5dHhvY3ZzZ2VkeWdwd2tqdGFucGVxeGNvcHJrZmZnaGdodWNyaWZuanJ3c3NyYmprcXdobmhlcHhjaWt3dWlib2Ntd3F5cWFiZ2hxZXlwZXhya3d2eGJwY2dwd3BvbWVjZGl4eGhiaW1pbGFvbG91dHV4ZnB1cmtia2ZkZWFpdmtiZHBrc2NodmV4cnRwZWt1b3hrY3FlaHd3eHRscmxsdnJvZ3Fmb2lhbnJpeXdjbm9pbGJ4cGZleHhrdm1hcWJ1eXJhcHduY2drZ2dkdGVscHFpaHhrc21waXNiZmNxaGlvZXFpY3d0cmRwZHBtbmRqY3Z1cHFvcGN5b3ltaG1sd250bmhzY3BkZWdka3h2dmZ3Ymdtb3d1ZHh5aGNpbG12Z2dkdnJwbGx4dmhsZGl5aWVwaGdna2t3ZHlucWxld2hteW1wdGphc2V2bHF0bHB3dXN5YmRzdmZxZnVqeWZ2YWx1bGdkc3Zzd3hzZ3lzaWdiamxpcXdpcWdlcWlzdWpwZmxheGF5b3F3ZndidXRjaW5la2Nqc2toaGV1a290ZHNkaXdpeWJkYWJucG1mYWtmeGZpaGxrd2ZleWVuaXlxanRsYWRyeGJmaG51ZWdrZWN2cWJvdnJpdnVxZWlybHFvdWxxdGt3b2JhaHhtdG1lcG1pYWFxcXlpYWNscHlxcnFseG5jb253eXBncHNhaGxnd253dWx3eGJ5bXdod2NiYm9leGtrbHRzZmN5bWl4dW5vZG9ybGVoaXdoZ2d3bWJnZ210ZG12a2pheXJnb29haHNwaWpsdGJvaWt5bHh5aGFsaWx3dm5pc2RkZHhrZGRhcXRnaHFreHNlcmZjdmdqeHd2eW5saXFzaW5lcnRibmZlYWNua2t0bW5kZG55bGNzZGVqaW5zeXBxeG5weGl1Zmp0eXJseXJjbG1jbGV1YnF4YXNlaHZmZm5pcWFqeGNnYnVyYWhsZ2lzaGF3eW5kbGxhdmh2cGh5ZnVncXJjaWRldmhjcm92ZnRqa3hkZnFzZ3J0aWtrZ2x1YXFzbmlmanFwd2x3dGFjd3Vxc3hlZmJ1dnZpZHliZ2ZlbmttbmFxcnlicXdnYmtoZmFna2pnZHhlZWprY2pvZG9vb3RpdWZqY2JnbW1yY25tY3lscGF4dWp0cHRyZW51dnlzZ255cm9mdHdpdGtnc2R1bnRhbXR1YmRmYXNybnh1ZW5xbWhlaGNxdW9laWNscGtldGJnb3lsY2N2aXZpd3FwbnN5eWRqd2dsbGZyanNwcWl0YWZ4ZGRybm10Y2duY2lvZHJwYmdteWx0ZWJpYW5iY2dob2l5dW5keGxjZHZ1Z2NsZnhjbXBjeW5pdWducWhna2FydWJ2cXNyb2pmb2dmcG15ZmxkeXdiY2Jrb3VyeHRwanRzd3hpZmlxZXR3ZWZrZnVzeHV4cXRjaWdsdWJyc2VscWRkdGVmZ2ZnaGFqcmdvd3hkY2lrdnNzdndrZmx1ZWhzYXFka3JqeWdscXZkbWF2cmJpaHFldmJ5aGhic3lhcWFuZmx0c3ZlcHhkcGJ5bG9yc3RtdmhhdWFycnhobHBjeG94aGZheWhvcXFocGplc3FhaXR0b2p1bml4Y29wZ3RhcGtibGJobmtvdnNzZmxvYWpkd3hnd2pod2tlYXRzY3RncGVjZmZwdWJ1c3FjbXFsZnV0bmdmd2puYmxpbGdxYWlpc25haHFiaHlleXJzamhoanBuZ2dhZGpqY2VyaG1raWlycm5udGJmeWp2dnJ0amVpZ2tzbW1sdXVpbGFucndzeHlzcnd5aWt4aWxibGZtZ2t0bXZhbHljbHlrZWlhdG1ka2Fma3FqcWd0dW9nZGx2dmJ2bnhrbWF3eWFtd3J0cmZvbW95dnF0eHFmbHhrYndwb29vZGZ5bWN2Z2NqZ3lmd3Jmc2pybWV0dnVqYXlvaml2cGplZ2J1dWdhbWZ3bm93c2FieHd0dmxpcXJqbXd5cGZseG5mbXVzb2N4dHVrbmhpc3BmbmVqa2h5dnhjbWt4bW5waGdiZnNwa2tubGxkcXZ0d2t2bGp2d2Rrbmdvb3F4ZW9xYnlic3B3YnZlcG9udGhneGF5aGFvY3ljYXh2dXBmcW9weXBkYW9pa215bm54cnNjdWlpY212dWN4b2hqb3Fibm94dml0d3FlcXVhcHBpbmN2bmNwYW9xbW5udGxsa3h5aWZ2dXl2cHZ4b3h5aWFqYWFmcHZpbWN0YWVyeGV1d2FueHh3dG9xbHRja3R1bWFjcHVrcHBxeGRranhkc3N0eGx5cWVzeW9nZHBmd3RjYm5zcHBqb3Zkc3B3cXBicmticGVpeG1pbnJuZ3FlZGNnb3BtbWRlZ3lpeGRsZXlya3FxZGhwZHNyeWJqeWJlcWFpY3dhanRzcW13cXR1cGlleGJka3VobWpvam5yanRldXJ3Z2x0dWVweHdrbnNiaWZiYnhodGZkb3Nkd2JmcG1veWdreGl4dWhzcXdkbndsdWpjZHhtZnR0YXBzd3Jhd2lwZXNrZ2JlZ3Rkd3BvcWdtY2pnbXdoanVrYnByY2tvdmltbW1nbXB3bm9idnRka3JjYmlzZXNxZHJ5cG1pdHRqcHJiZ2duc3RvamF5dnNzcGZ3a29udHF2cHlvcnhpYXd2c3d0cGZnanhsbGhsZ3Z3ZHBiZWt1cGpxYWlhdmNueWdudHZyaW1vZmp1anVpYW91bWhobXJmaGttbHVxc3h4anhsZmhhZWZ4Z29sd3Z3dmpwZmZ5b2J3c2VyYWNkYWFia2VmbmpleWNpbG52a2pvamdxaWhmd2RxZ2JoaGhubnVqc3V3a2l3b3VwZXFndXFsbmhmZnJzdWhya3NzZnVyamhxbGtjd2dqdGh0cW14eGNwd3djcXdiZmpndmdsYnZibGthbWx0d25odXRjbXFubnNrZGFqa2tsaG9pdm9uZHBscWFqanltbnFjcmRra2dzb3JraXljcmtnc3VtZnZuamJqeGlvZWhod3dvbHZ5cWhlaW9ndm9ldmV1a2FqdHBqdmd0Y3ZwbHdudW13bXhlbHhhZG9weHNoaHBocWF5ZGlweGl3ZnJwbmRxZmljdWR1cXF5dnJ1Y3dpYWxrdWZseWJhaXFxb3FqZ3Nkdm9uanR1d2djZGh5bmpkdHlsZnlwa3NydW5oYm1nYmxjdnB3Y2NsaGhoZ2lzb2dzYXRyY2VpaXhrYm52Z3d5dXFpcmZqanVncHhhcndmaXB3cGpybWVra212YmR0eGZ3d2llZnl3bXJxd3F5dWdjZGJwcGx1dmlteWtxdGNoeGlpbHFuZ2ZqcmJmeHBsd2JoaHN3d2hvZm94Y3FmdHVrdHF4eHJvY3Z3YWJvaGZzeGhpcWl2bnZmdWtrd251Y2hjaG1seGFucGNieWl1eGJscnFwYWJzdXRlY3BqbXRveXZjd2hpaHdqY2JybmhteGRxZWJicHN0ZGtvcGV4eGNka3B5bG9yaW9qandzcmhwa3hlb2lsaGRocXBraXJjZGphcnJ1ZWtqeWtyamJibXFkdWhvZHdhbmxqb29zZ3hrZ3NpcWt4dmhwcWFva2hpdmFnaGt4dGpoeG9zbm1obHRha3VyeXNhdXV5ZHRqYm1mZWlob3lpc3dsdmtobXl1ZnlxbGdrZmhtd2JveHFzZmVwb3Fmd2RybWVrdnd4bXJra3ZucGtsb21tY3dtZXl3Y3VkcGpuZWp0eXhpY3Zza3Fob2J0YnBldG9nc3Fucmhkb2xvdWd1eW9wY3dmcWl2bmhwYnBqYmJubWNxamliYnF3c2tnYmp0ZXRqbWhlcnRpd2tqY2l0aW9vb2tqaXdoaWFwaHhnbmVsbXliY3JpcXRkaG1yaXV5b3B1ZHN5YmR5YnZyZ29vZG93cXRxdW12bmtpbmFkbmpobHFoY21oY2J1ZG1ocWxyZm9tdHFzdHNucXZkeWt0dGxtbmpvZnBuY3BvdWtpZHlncHZxcmJxZGRtam1wb2djanhkcnh0Y2N3dWJ0YXRrbWlrZmRiZHF2b3VxZHBmZXB4bmJheGZuZHdiamdjanNlbWl1cWd1dXhpaWNhdWJ5Z2l3cHNqcmhobGxhcW91anN3ZHRqZ29mbWF2a2J3YWVzaWh2dm9nZXBwYWphcm5xcnVsa3JyYm1yY3l5Y2ZsdmNnanNzeXV3Y2RoZHJobHRmY2Z1eG9naXd1ZHV1bWtkYnJnamJpeGlyZGZhanZpaW91bWp5cWtrdWVuZGtsaGRqbHFqYnJjZnZ0dXhxanhjbGllanRiamxudndyaWpmbXlycHBjbGx0dndweWJ3a2VqbWFmY29wcXlmZ3B4dXh4cWNpcnFwdHlibm53YmVtcGN1ZndheHF2cG1wZW9zc3luYnV2Ymxxcndid3ZjeWptcmNkbWh2ZWJ3anR2aHRtcWJncnBtdXVza2N5bGhieHRuaHJ1bWR1d2tmb25iYXVkZ2Rhamd3Y2R2eXZxdXBjZndiYmR3ZXVvcXRicnVobm1lbXlrcnVwZ2xvbWdpaW9udGNlaGlnanNtZXNiZWx3eW1idm5lcGpqcnNpYnBsc2JpaGR4b2Fxa2NzbWd0dm9jeW5hc3Rqc2ZqcmFwYXl1dXB3Zm94bWFncWt1eG5maWNkaHFrcWtpc3ZhZ2JocG14c3h1eHh0eHRid3loeHZucHFqYmx0eWF5dXZidHFueG9nYWtjam9rbmZscWJmZHVrYWdjY2lucGJqZXFqeWNuanZzbXdnam1rc2Rna3lidGtybm50ZXVraWx2bmZheGdseGlrZmdla2tmcG9icHhjdXd4YXhra2JpZWV3ZmZnZG1weWl3ZXZmZ29ycmxkY29vcXFnZ3RuY3Frb2N4bnhncndwY3hxY2F2cm9oZWtxanhuaXBjZnJrZHN1aGhxZnF0dHNscmRzbGRweW1yaGh0Y2FkcGRocXNueWFtcWJjYmV4b2liZ2VsZHB4ZHBvbmlnbnhoam1ybmdrcWZpdnRybWl4cHJwdWxuZGl1c29kYnltbHVkcXBkanVwaWtqYnZua3Rrd2hpb3l5dW5nbGx4eHJucHdnaWJ1d2Zya2dhdW5mdWNwa3ZmeHR1cHd1cmhpZm15cmt3amN1aWllbGtpdXRudnRkY2hqbWF3aWtldHd3dmRucWFra3B3Y3FhcXJhY2h2dnJob29rc2VzeXV0ZmFjbnVraWpva3lmcHJscXhoa3Z3b29pbGlraXBjYXhoeG9xZ2Fyd2Nidmx3bm9mc2pyZ2lzaGl5ZWR3anV0cWR4a2p2ZWtranZhY2V5bGd4ZGxtaW5qeHlnbmRvZWVjcGJyeHRncm9pa3dlaWpsbmx4eXhuZGlkbGZtbW9hdGZ0d2VtZW5ldWh4YWN1b3N4bmJqbWhhcHNodmdudXhvamhodmRha2x5aXN1aXh5ZGR3YndvaGpkd2FmbWFmaGZndnJ1cmp0anFxdmd1dnB3Z2xraXdwbnVwdmJvZGV5cmpva2J5bW9pa2h3YnFob2hxbXBseHR5Z29ncHh5dXBzZ3lqZXZ1aXBxZGN0eXZiaW54eGp2Z3F1aHRjZ2xkb2l4eGRmbWluZ2liYmR0ZWF0YXVxdGhubnBlZ2J3dnV1bW9ra3dncGJxeW9ubGhkdmZwbnF4dWRtYXNvYm1sZnNzZ2RhZmJmY2pqc3BzdWh4Ymp4c3JpdHlhdGZvanNuZXRrb2thcWxnc21tZnlvbGV4a3lkY2NheXZ5dXBuc2dhaWxtcmdkcGNqa2x1cndneGxvb3Z5YnFwbGl2cHdyYmd0cHh4Zmd3amZ4ZnFsZGdseG9kbmNiYWRiY2lxc2RkbmJtdnNzc2hha3NvYmZrZndteXFnZG1td3JleGdyZWZyZHNmZ3ljdW1ucWJwZWdrd3d4eG5sdGN3eXFlc3Z1bXlmY3F4dnBoam52dWxqZWt4cGp0c2FqYWFqdHdrbnJobHRhcmdnaHdkcWM=
		i: number = 23
		leftbits: number = 0
		leftdata: number = 97
		padding: boolean = false
		result: string = 
Paused at 96
	Hit Breakpoint(s) 6
	Call Stack: base64ToString 
	Bindings: c: number = 24
		data: string = 
		i: number = 24
		leftbits: number = 0
		leftdata: number = 0
		padding: boolean = false
		result: string = 
